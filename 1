function App() {
  const { useState, useEffect } = React;

  // --- Initial State & Constants ---
  const initialState = {
    scenario: 'baseline', // 'baseline', 'memory_focus', 'unclassified_focus', 'balanced'
    kpis: {
      // Before AI (Rule-based only)
      manualRemediationRate: 80, // % of failures needing manual intervention
      avgRemediationTime: 4, // hours
      retrySuccessRateMemory: 10, // % success for memory errors
      retrySuccessRateUnclassified: 20, // % success for unclassified errors
      unnecessaryRetryCost: 10000, // $ per month
      totalOperationalCost: 25000, // $ per month (includes retry cost + manual effort)
      // After AI (Initial state - can be improved by decisions)
      aiRemediationRateMemory: 56, // % auto-remediated memory errors
      aiRemediationRateUnclassified: 30, // % auto-remediated unclassified (initial guess)
      aiAvgRemediationTime: 1, // hours (for automated cases)
      aiRetrySuccessRateMemory: 60, // % success with AI config for memory
      aiRetrySuccessRateUnclassified: 40, // % success with AI decision for unclassified
      aiUnnecessaryRetryCostReduction: 50, // % reduction
      aiTotalOperationalCostReduction: 40, // % reduction (initial guess)
    },
    decisions: {
      memory_focus: {
        tuneModelAggressiveness: 'conservative', // 'conservative', 'balanced', 'aggressive'
        investInExpertRules: false,
        expandComputeResources: false,
      },
      unclassified_focus: {
        prioritizeRuleCreation: false,
        refineMLUnclassified: 'basic', // 'basic', 'advanced'
        allowUserOverrides: true,
      },
      balanced: {
        mlTrainingFrequency: 'daily', // 'daily', 'weekly'
        crossTeamCollaboration: 'standard', // 'standard', 'enhanced'
        integrateRightSizing: false,
      }
    },
    log: ["Simulador iniciado. Seleccione un escenario y tome decisiones."]
  };

  const [scenario, setScenario] = useState(initialState.scenario);
  const [kpis, setKpis] = useState(initialState.kpis);
  const [decisions, setDecisions] = useState(initialState.decisions);
  const [log, setLog] = useState(initialState.log);

  // --- Helper Functions ---
  const formatPercentage = (value) => `${value.toFixed(1)}%`;
  const formatCurrency = (value) => `$${value.toFixed(0)}`;
  const formatHours = (value) => `${value.toFixed(1)} hrs`;

  const addLog = (message) => {
    setLog(prevLog => [message, ...prevLog.slice(0, 9)]); // Keep last 10 messages
  };

  // --- Simulation Logic ---
  useEffect(() => {
    // Recalculate KPIs based on scenario and decisions
    let newKpis = { ...initialState.kpis }; // Start from base AI results
    let baseAiCostReduction = initialState.kpis.aiTotalOperationalCostReduction;
    let baseAiMemRemediation = initialState.kpis.aiRemediationRateMemory;
    let baseAiUnclassifiedRemediation = initialState.kpis.aiRemediationRateUnclassified;
    let baseAiMemSuccess = initialState.kpis.aiRetrySuccessRateMemory;
    let baseAiUnclassifiedSuccess = initialState.kpis.aiRetrySuccessRateUnclassified;
    let baseAiUnnecessaryCostReduction = initialState.kpis.aiUnnecessaryRetryCostReduction;

    if (scenario === 'memory_focus') {
      const { tuneModelAggressiveness, investInExpertRules, expandComputeResources } = decisions.memory_focus;
      // Model Aggressiveness
      if (tuneModelAggressiveness === 'balanced') {
        baseAiMemRemediation += 5;
        baseAiMemSuccess += 8;
        baseAiCostReduction += 3;
        baseAiUnnecessaryCostReduction += 5;
      } else if (tuneModelAggressiveness === 'aggressive') {
        baseAiMemRemediation += 10;
        baseAiMemSuccess += 15;
        baseAiCostReduction += 5; // More savings but maybe higher risk?
        baseAiUnnecessaryCostReduction += 10;
      }
      // Expert Rules
      if (investInExpertRules) {
         baseAiMemRemediation += 3; // Rules complement ML
         baseAiMemSuccess += 5;
         baseAiCostReduction += 2;
      }
      // Compute Resources (can increase success but also cost if not managed)
      if (expandComputeResources) {
         baseAiMemSuccess += 7;
         // Cost impact depends on 'Right Sizing' later or other factors
         // For simplicity, slight decrease in cost reduction here due to resource cost
         baseAiCostReduction -= 2;
      }
    } else if (scenario === 'unclassified_focus') {
       const { prioritizeRuleCreation, refineMLUnclassified, allowUserOverrides } = decisions.unclassified_focus;
       // Rule Creation
       if (prioritizeRuleCreation) {
           baseAiUnclassifiedRemediation += 8; // More known errors handled by rules
           baseAiUnclassifiedSuccess += 5; // Rules are deterministic
           baseAiCostReduction += 4; // Fewer ML cycles needed
       }
       // Refine ML
       if (refineMLUnclassified === 'advanced') {
           baseAiUnclassifiedRemediation += 12;
           baseAiUnclassifiedSuccess += 10;
           baseAiCostReduction += 6;
           baseAiUnnecessaryCostReduction += 15;
       }
       // User Overrides (might slightly reduce automated savings if used often)
       if (!allowUserOverrides) {
           baseAiCostReduction += 2; // Force automation
           baseAiUnnecessaryCostReduction += 5;
       }
    } else if (scenario === 'balanced') {
        const { mlTrainingFrequency, crossTeamCollaboration, integrateRightSizing } = decisions.balanced;
        // Training Frequency
        if (mlTrainingFrequency === 'weekly') {
            // Slightly worse performance due to stale model
            baseAiMemRemediation -= 2;
            baseAiUnclassifiedRemediation -= 3;
            baseAiCostReduction -= 3;
        }
        // Collaboration
        if (crossTeamCollaboration === 'enhanced') {
            baseAiMemRemediation += 4;
            baseAiUnclassifiedRemediation += 4;
            baseAiCostReduction += 5; // Better insights, faster fixes
            baseAiMemSuccess += 5;
            baseAiUnclassifiedSuccess += 5;
        }
        // Right Sizing (Major potential impact)
        if (integrateRightSizing) {
            baseAiCostReduction += 15; // Significant cost savings
            baseAiUnnecessaryCostReduction += 10;
            // Could also improve success rates by preventing OOMs proactively
            baseAiMemSuccess += 5;
        }
    }

    // Apply calculated changes
    newKpis.aiRemediationRateMemory = Math.min(95, Math.max(0, baseAiMemRemediation));
    newKpis.aiRemediationRateUnclassified = Math.min(95, Math.max(0, baseAiUnclassifiedRemediation));
    newKpis.aiRetrySuccessRateMemory = Math.min(98, Math.max(0, baseAiMemSuccess));
    newKpis.aiRetrySuccessRateUnclassified = Math.min(98, Math.max(0, baseAiUnclassifiedSuccess));
    newKpis.aiUnnecessaryRetryCostReduction = Math.min(100, Math.max(0, baseAiUnnecessaryCostReduction));
    newKpis.aiTotalOperationalCostReduction = Math.min(100, Math.max(0, baseAiCostReduction));

    // Update derived KPIs
    const remainingManualRate = 100 - (newKpis.aiRemediationRateMemory + newKpis.aiRemediationRateUnclassified) / 2; // Simplified average
    newKpis.aiAvgRemediationTime = ((remainingManualRate / 100) * initialState.kpis.avgRemediationTime) + ((1 - remainingManualRate / 100) * initialState.kpis.aiAvgRemediationTime);

    setKpis(newKpis);

  }, [scenario, decisions]);

  // --- Event Handlers ---
  const handleScenarioChange = (event) => {
    setScenario(event.target.value);
    addLog(`Escenario cambiado a: ${event.target.options[event.target.selectedIndex].text}`);
  };

  const handleDecisionChange = (scenarioKey, decisionKey, value) => {
    // Handle boolean toggle for checkboxes
    const newValue = typeof decisions[scenarioKey][decisionKey] === 'boolean' ? !decisions[scenarioKey][decisionKey] : value;

    setDecisions(prev => ({
      ...prev,
      [scenarioKey]: {
        ...prev[scenarioKey],
        [decisionKey]: newValue
      }
    }));
     addLog(`Decisión '${decisionKey}' en escenario '${scenarioKey}' actualizada a: ${newValue}`);
  };


  // --- Render Logic ---
  const renderDecisions = () => {
    switch (scenario) {
      case 'memory_focus':
        return (
          <div className="space-y-3 p-3 border rounded bg-gray-50">
            <h4 className="font-semibold text-lg mb-2">Decisiones: Foco en Errores de Memoria</h4>
            <div>
              <label className="block text-sm font-medium text-gray-700">Agresividad del Modelo ML:</label>
              <select
                value={decisions.memory_focus.tuneModelAggressiveness}
                onChange={(e) => handleDecisionChange('memory_focus', 'tuneModelAggressiveness', e.target.value)}
                className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              >
                <option value="conservative">Conservadora (Prioriza evitar fallos)</option>
                <option value="balanced">Equilibrada (Éxito vs. Costo)</option>
                <option value="aggressive">Agresiva (Prioriza ahorro de costos)</option>
              </select>
            </div>
             <div className="flex items-center">
              <input
                type="checkbox"
                id="investInExpertRules"
                checked={decisions.memory_focus.investInExpertRules}
                onChange={(e) => handleDecisionChange('memory_focus', 'investInExpertRules', e.target.checked)}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="investInExpertRules" className="ml-2 block text-sm text-gray-900">Invertir en refinar reglas expertas para memoria</label>
            </div>
             <div className="flex items-center">
              <input
                type="checkbox"
                id="expandComputeResources"
                checked={decisions.memory_focus.expandComputeResources}
                onChange={(e) => handleDecisionChange('memory_focus', 'expandComputeResources', e.target.checked)}
                 className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="expandComputeResources" className="ml-2 block text-sm text-gray-900">Expandir recursos de cómputo temporalmente para trabajos con OOM</label>
            </div>
          </div>
        );
      case 'unclassified_focus':
         return (
          <div className="space-y-3 p-3 border rounded bg-gray-50">
            <h4 className="font-semibold text-lg mb-2">Decisiones: Foco en Errores No Clasificados</h4>
             <div className="flex items-center">
              <input
                type="checkbox"
                id="prioritizeRuleCreation"
                checked={decisions.unclassified_focus.prioritizeRuleCreation}
                onChange={(e) => handleDecisionChange('unclassified_focus', 'prioritizeRuleCreation', e.target.checked)}
                 className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="prioritizeRuleCreation" className="ml-2 block text-sm text-gray-900">Priorizar creación de nuevas reglas manuales</label>
            </div>
             <div>
              <label className="block text-sm font-medium text-gray-700">Refinamiento del Modelo ML para No Clasificados:</label>
              <select
                value={decisions.unclassified_focus.refineMLUnclassified}
                onChange={(e) => handleDecisionChange('unclassified_focus', 'refineMLUnclassified', e.target.value)}
                 className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              >
                <option value="basic">Básico (Modelo actual)</option>
                <option value="advanced">Avanzado (Invertir en más features/tuning)</option>
              </select>
            </div>
             <div className="flex items-center">
              <input
                type="checkbox"
                id="allowUserOverrides"
                checked={decisions.unclassified_focus.allowUserOverrides}
                onChange={(e) => handleDecisionChange('unclassified_focus', 'allowUserOverrides', e.target.checked)}
                 className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="allowUserOverrides" className="ml-2 block text-sm text-gray-900">Permitir a usuarios forzar reintentos (ignorar recomendación ML)</label>
            </div>
          </div>
        );
       case 'balanced':
         return (
          <div className="space-y-3 p-3 border rounded bg-gray-50">
            <h4 className="font-semibold text-lg mb-2">Decisiones: Enfoque Equilibrado y Futuro</h4>
             <div>
              <label className="block text-sm font-medium text-gray-700">Frecuencia de Reentrenamiento del Modelo ML:</label>
              <select
                value={decisions.balanced.mlTrainingFrequency}
                onChange={(e) => handleDecisionChange('balanced', 'mlTrainingFrequency', e.target.value)}
                 className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              >
                <option value="daily">Diaria</option>
                <option value="weekly">Semanal</option>
              </select>
            </div>
             <div>
              <label className="block text-sm font-medium text-gray-700">Nivel de Colaboración Inter-equipos (Ingeniería, Datos, Finanzas):</label>
              <select
                value={decisions.balanced.crossTeamCollaboration}
                onChange={(e) => handleDecisionChange('balanced', 'crossTeamCollaboration', e.target.value)}
                 className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"
              >
                <option value="standard">Estándar</option>
                <option value="enhanced">Mejorada (Reuniones regulares, objetivos compartidos)</option>
              </select>
            </div>
             <div className="flex items-center">
              <input
                type="checkbox"
                id="integrateRightSizing"
                checked={decisions.balanced.integrateRightSizing}
                onChange={(e) => handleDecisionChange('balanced', 'integrateRightSizing', e.target.checked)}
                 className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor="integrateRightSizing" className="ml-2 block text-sm text-gray-900">Integrar iniciativa "Right Sizing" (Optimización proactiva de recursos)</label>
            </div>
          </div>
        );
      default: // baseline
        return <p className="text-gray-600 italic">Seleccione un escenario para ver las decisiones disponibles.</p>;
    }
  };

  return (
    <div className="p-4 font-sans bg-white rounded-lg shadow-md max-w-4xl mx-auto">
      <h3 className="text-2xl font-bold text-center text-indigo-700 mb-4">Simulador Interactivo: Auto Remediación con IA</h3>

      <div className="mb-6 p-4 border rounded bg-indigo-50">
        <h4 className="font-semibold text-lg mb-2 text-indigo-800">Instrucciones de Uso</h4>
        <p className="text-sm text-gray-700">
          1.  **Seleccione un Escenario:** Elija una estrategia general (Foco en Memoria, Foco en No Clasificados, Equilibrado) para ver las decisiones asociadas. El escenario 'Baseline' muestra los resultados iniciales sin decisiones adicionales.
          <br />
          2.  **Tome Decisiones:** Dentro del escenario elegido, ajuste las opciones (selectores, checkboxes) para simular diferentes enfoques de implementación y optimización.
          <br />
          3.  **Observe los Indicadores (KPIs):** Vea cómo cambian los indicadores clave de rendimiento en la sección "Estado Posterior (Con IA y Decisiones)" en comparación con el estado previo y el estado inicial de la IA.
          <br />
          4.  **Revise el Log:** El registro muestra los cambios de escenario y decisiones realizadas.
        </p>
      </div>


      <div className="grid grid-cols-1 md:grid-cols-3 gap-6 mb-6">
        {/* Scenario Selection */}
        <div className="md:col-span-1">
          <label htmlFor="scenario" className="block text-sm font-medium text-gray-700 mb-1">Seleccionar Escenario Estratégico:</label>
          <select
            id="scenario"
            value={scenario}
            onChange={handleScenarioChange}
            className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md shadow-sm"
          >
            <option value="baseline">Baseline (Resultados IA iniciales)</option>
            <option value="memory_focus">Foco en Errores de Memoria</option>
            <option value="unclassified_focus">Foco en Errores No Clasificados</option>
            <option value="balanced">Enfoque Equilibrado y Futuro</option>
          </select>
        </div>

         {/* Decision Panel */}
        <div className="md:col-span-2">
           {renderDecisions()}
        </div>
      </div>


      {/* KPIs Display */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6 mb-6">
        {/* Before AI KPIs */}
        <div className="p-4 border rounded shadow-sm bg-red-50">
          <h4 className="font-semibold text-lg mb-3 text-red-800 border-b pb-1">Estado Previo (Solo Reglas)</h4>
          <ul className="space-y-1 text-sm text-gray-700">
            <li>Tasa Remediación Manual: <span className="font-medium text-red-700">{formatPercentage(kpis.manualRemediationRate)}</span></li>
            <li>Tiempo Prom. Remediación: <span className="font-medium text-red-700">{formatHours(kpis.avgRemediationTime)}</span></li>
            <li>Éxito Reintento (Memoria): <span className="font-medium text-red-700">{formatPercentage(kpis.retrySuccessRateMemory)}</span></li>
            <li>Éxito Reintento (No Clasif.): <span className="font-medium text-red-700">{formatPercentage(kpis.retrySuccessRateUnclassified)}</span></li>
            <li>Costo Reintentos Innecesarios: <span className="font-medium text-red-700">{formatCurrency(kpis.unnecessaryRetryCost)} / mes</span></li>
             <li>Costo Operacional Total: <span className="font-medium text-red-700">{formatCurrency(kpis.totalOperationalCost)} / mes</span></li>
          </ul>
        </div>

        {/* After AI KPIs */}
        <div className="p-4 border rounded shadow-sm bg-green-50">
          <h4 className="font-semibold text-lg mb-3 text-green-800 border-b pb-1">Estado Posterior (Con IA y Decisiones)</h4>
           <ul className="space-y-1 text-sm text-gray-700">
             <li>Tasa Remediación Automática (Memoria): <span className="font-medium text-green-700">{formatPercentage(kpis.aiRemediationRateMemory)}</span></li>
             <li>Tasa Remediación Automática (No Clasif.): <span className="font-medium text-green-700">{formatPercentage(kpis.aiRemediationRateUnclassified)}</span></li>
             <li>Tiempo Prom. Remediación (Global): <span className="font-medium text-green-700">{formatHours(kpis.aiAvgRemediationTime)}</span></li>
             <li>Éxito Reintento IA (Memoria): <span className="font-medium text-green-700">{formatPercentage(kpis.aiRetrySuccessRateMemory)}</span></li>
             <li>Éxito Reintento IA (No Clasif.): <span className="font-medium text-green-700">{formatPercentage(kpis.aiRetrySuccessRateUnclassified)}</span></li>
             <li>Reducción Costo Reintentos Innec.: <span className="font-medium text-green-700">{formatPercentage(kpis.aiUnnecessaryRetryCostReduction)}</span></li>
             <li>Reducción Costo Operacional Total: <span className="font-medium text-green-700">{formatPercentage(kpis.aiTotalOperationalCostReduction)}</span></li>
          </ul>
        </div>
      </div>

       {/* Log Display */}
        <div className="mt-6 p-3 border rounded bg-gray-100">
            <h4 className="font-semibold text-md mb-2 text-gray-800">Registro de Actividad</h4>
            <div className="text-xs text-gray-600 space-y-1 max-h-24 overflow-y-auto">
                {log.map((entry, index) => (
                    <p key={index}>{entry}</p>
                ))}
            </div>
        </div>


      {/* Footer */}
      <footer className="mt-8 pt-4 border-t text-center text-xs text-gray-500">
        Desarrollado por Progerente. Todos los derechos reservados.
      </footer>
    </div>
  );
}
